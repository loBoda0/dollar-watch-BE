generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id              Int                     @id @default(autoincrement())
    email           String                  @unique
    name            String
    transactions    Transaction[]
    userInvestments UserInvestment[]
    dividends       Dividend[]
    investmentTxs   InvestmentTransaction[]
    paychecks       Paycheck[]
    createdAt       DateTime                @default(now())
}

model Transaction {
    id          Int                 @id @default(autoincrement())
    user        User                @relation(fields: [userId], references: [id])
    userId      Int
    category    TransactionCategory @relation(fields: [categoryId], references: [id])
    categoryId  Int
    amount      Decimal             @db.Decimal(15, 2)
    description String?
    date        DateTime
    createdAt   DateTime            @default(now())
}

model TransactionCategory {
    id          Int                   @id @default(autoincrement())
    name        String
    parent      TransactionCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
    parentId    Int?
    children    TransactionCategory[] @relation("CategoryHierarchy")
    Transaction Transaction[]
}

model StockIssuer {
    id          Int          @id @default(autoincrement())
    name        String
    country     String?
    instruments Instrument[]
}

model Instrument {
    id              Int                     @id @default(autoincrement())
    name            String
    symbol          String                  @unique
    type            String // "stock", "etf", etc.
    issuer          StockIssuer             @relation(fields: [issuerId], references: [id])
    issuerId        Int
    userInvestments UserInvestment[]
    investmentTxs   InvestmentTransaction[]
    dividends       Dividend[]
}

model UserInvestment {
    id           Int        @id @default(autoincrement())
    user         User       @relation(fields: [userId], references: [id])
    userId       Int
    instrument   Instrument @relation(fields: [instrumentId], references: [id])
    instrumentId Int
    quantity     Decimal    @db.Decimal(15, 6)
    avgBuyPrice  Decimal    @db.Decimal(15, 2)
    createdAt    DateTime   @default(now())
}

model InvestmentTransaction {
    id           Int        @id @default(autoincrement())
    user         User       @relation(fields: [userId], references: [id])
    userId       Int
    instrument   Instrument @relation(fields: [instrumentId], references: [id])
    instrumentId Int
    type         String // "buy" or "sell"
    quantity     Decimal    @db.Decimal(15, 6)
    price        Decimal    @db.Decimal(15, 2)
    date         DateTime
    createdAt    DateTime   @default(now())
}

model Dividend {
    id           Int        @id @default(autoincrement())
    user         User       @relation(fields: [userId], references: [id])
    userId       Int
    instrument   Instrument @relation(fields: [instrumentId], references: [id])
    instrumentId Int
    amount       Decimal    @db.Decimal(15, 2)
    date         DateTime
    createdAt    DateTime   @default(now())
}

model SalaryTaxCode {
    id            Int                @id @default(autoincrement())
    code          String             @unique
    description   String?
    contributions ContributionType[]
    paychecks     Paycheck[]
}

model Paycheck {
    id            Int                    @id @default(autoincrement())
    user          User                   @relation(fields: [userId], references: [id])
    userId        Int
    taxCode       SalaryTaxCode          @relation(fields: [taxCodeId], references: [id])
    taxCodeId     Int
    grossAmount   Decimal                @db.Decimal(15, 2)
    netAmount     Decimal                @db.Decimal(15, 2)
    taxBase       Decimal                @db.Decimal(15, 2)
    taxAmount     Decimal                @db.Decimal(15, 2)
    mealAllowance Decimal?               @db.Decimal(15, 2)
    forPeriod     String // "10.2023"
    paymentDate   DateTime
    createdAt     DateTime               @default(now())
    incomeItems   IncomeItem[]
    contributions PaycheckContribution[]
}

model IncomeItem {
    id         Int      @id @default(autoincrement())
    paycheck   Paycheck @relation(fields: [paycheckId], references: [id])
    paycheckId Int
    label      String
    amount     Decimal  @db.Decimal(15, 2)
}

model ContributionType {
    id              Int                    @id @default(autoincrement())
    name            String
    isEmployerPaid  Boolean                @default(false)
    taxCode         SalaryTaxCode          @relation(fields: [taxCodeId], references: [id])
    taxCodeId       Int
    paycheckEntries PaycheckContribution[]
}

model PaycheckContribution {
    id                 Int              @id @default(autoincrement())
    paycheck           Paycheck         @relation(fields: [paycheckId], references: [id])
    paycheckId         Int
    contributionType   ContributionType @relation(fields: [contributionTypeId], references: [id])
    contributionTypeId Int
    amount             Decimal          @db.Decimal(15, 2)
}
