generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id              Int       @id @default(autoincrement())
    email           String    @unique
    fullName        String
    passwordHash    String
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    emailVerifiedAt DateTime?
    role            UserRole  @default(USER)
    avatarUrl       String?

    // Auth-related relations
    sessions           Session[]
    accounts           Account[]
    verificationTokens VerificationToken[]

    // Domain-specific relations
    transactions           Transaction[]
    investmentTransactions InvestmentTransaction[]
    dividends              Dividend[]
    paychecks              Paycheck[]
    GovernmentTransfer     GovernmentTransfer[]
}

model Session {
    id           Int      @id @default(autoincrement())
    userId       Int
    sessionToken String   @unique
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("sessions")
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime
    userId     Int?

    user User? @relation(fields: [userId], references: [id])

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Account {
    id                Int      @id @default(autoincrement())
    userId            Int
    provider          String
    providerAccountId String
    accessToken       String?  @db.Text
    refreshToken      String?  @db.Text
    expiresAt         Int?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

enum UserRole {
    ADMIN
    USER
}

model Transaction {
    id           Int                 @id @default(autoincrement())
    user         User                @relation(fields: [userId], references: [id])
    userId       Int
    category     TransactionCategory @relation(fields: [categoryId], references: [id])
    categoryId   Int
    currency     String              @default("EUR")
    amount       Decimal             @db.Decimal(15, 2)
    description  String?
    date         DateTime
    createdAt    DateTime            @default(now())
    BudgetType   BudgetType?         @relation(fields: [budgetTypeId], references: [id])
    budgetTypeId Int?
    metadata     Json?

    @@index([userId])
    @@index([date])
}

model TransactionCategory {
    id          Int                   @id @default(autoincrement())
    name        String
    parent      TransactionCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
    parentId    Int?
    children    TransactionCategory[] @relation("CategoryHierarchy")
    Transaction Transaction[]
}

model StockIssuer {
    id          Int          @id @default(autoincrement())
    name        String
    country     String?
    instruments Instrument[]
}

model Instrument {
    id            Int                     @id @default(autoincrement())
    name          String
    symbol        String                  @unique
    type          String // "stock", "etf", etc.
    issuer        StockIssuer             @relation(fields: [issuerId], references: [id])
    issuerId      Int
    investmentTxs InvestmentTransaction[]
    dividends     Dividend[]
}

model InvestmentTransaction {
    id           Int        @id @default(autoincrement())
    user         User       @relation(fields: [userId], references: [id])
    userId       Int
    instrument   Instrument @relation(fields: [instrumentId], references: [id])
    instrumentId Int
    type         String // "buy" or "sell"
    currency     String     @default("EUR")
    quantity     Decimal    @db.Decimal(15, 6)
    price        Decimal    @db.Decimal(15, 2)
    date         DateTime
    createdAt    DateTime   @default(now())
}

model Dividend {
    id           Int        @id @default(autoincrement())
    user         User       @relation(fields: [userId], references: [id])
    userId       Int
    instrument   Instrument @relation(fields: [instrumentId], references: [id])
    instrumentId Int
    currency     String     @default("EUR")
    amount       Decimal    @db.Decimal(15, 2)
    date         DateTime
    createdAt    DateTime   @default(now())
}

model Paycheck {
    id          Int             @id @default(autoincrement())
    user        User            @relation(fields: [userId], references: [id])
    userId      Int
    currency    String          @default("EUR")
    grossAmount Decimal         @db.Decimal(15, 2)
    netAmount   Decimal         @db.Decimal(15, 2)
    taxBase     Decimal         @db.Decimal(15, 2)
    taxAmount   Decimal         @db.Decimal(15, 2)
    periodStart DateTime
    periodEnd   DateTime
    paymentDate DateTime
    createdAt   DateTime        @default(now())
    entries     PaycheckEntry[]

    @@index([userId])
    @@index([periodStart, periodEnd])
}

enum PaycheckEntryType {
    INCOME
    CONTRIBUTION
    ALLOWANCE
}

model PaycheckEntry {
    id           Int               @id @default(autoincrement())
    paycheck     Paycheck          @relation(fields: [paycheckId], references: [id])
    paycheckId   Int
    amount       Decimal           @db.Decimal(15, 2)
    type         PaycheckEntryType
    budgetType   BudgetType        @relation(fields: [budgetTypeId], references: [id])
    budgetTypeId Int
    metadata     Json?
    createdAt    DateTime          @default(now())

    @@index([paycheckId])
    @@index([type])
}

model BudgetCategory {
    id   Int    @id @default(autoincrement())
    code String @unique
    name String

    budgetTypes BudgetType[]
}

model BudgetType {
    id          Int             @id @default(autoincrement())
    code        String          @unique
    name        String
    countryCode String?
    description String?
    category    BudgetCategory? @relation(fields: [categoryId], references: [id])
    categoryId  Int?

    entries             PaycheckEntry[]
    governmentTransfers GovernmentTransfer[]
    transactions        Transaction[]
}

model GovernmentTransfer {
    id           Int        @id @default(autoincrement())
    userId       Int
    budgetType   BudgetType @relation(fields: [budgetTypeId], references: [id])
    budgetTypeId Int
    type         String
    description  String?
    amount       Decimal    @db.Decimal(15, 2)
    date         DateTime
    createdAt    DateTime   @default(now())
    metadata     Json?

    user User @relation(fields: [userId], references: [id])

    @@index([userId])
    @@index([date])
}
